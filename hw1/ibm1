#!/usr/bin/python

import sys, codecs, math
from collections import defaultdict
from optparse import OptionParser

parser = OptionParser(usage="./%prog -n NUM_OF_SENTENCES -i INPUT_FILE")
parser.add_option("-n", "--number", type=int, help="The number of sentences to align. (default=all)", default=0)
parser.add_option("-i", "--input", default="data/dev-test-train.de-en", help="The input file containing sentences to align.")

(ops, args) = parser.parse_args()

num = ops.number if ops.number > 0 else None
sys.stderr.write("Reading data...\n")
sents = [tuple(line.strip().split("|||")) for line in codecs.open(ops.input, "rb", "utf-8").readlines()[:num]]
data = [(german.strip().split(), english.strip().split()) for (german, english) in sents]
glex = []
elex = []
for german, english in data:
    glex += german
    elex += english
sys.stderr.write("Building German lexicon...\n")
glex = set(glex)
sys.stderr.write("Building English lexicon...\n")
elex = set(elex)

sys.stderr.write("Initializing P(f|e)...\nCounting...\n")
# Initialize P(f|e)
P_f_e = defaultdict(lambda: defaultdict(float))
for i, (german, english) in enumerate(data):
    if i in range(0, len(data), int(math.ceil(0.1*len(data))))+[len(data)-1]:
        sys.stderr.write(str(i)+"\n")
    for gw in german:
        for ew in english:
            P_f_e[gw][ew] = 1.0
sys.stderr.write("Normalizing counts...\n")
norm_range = range(0, len(P_f_e.items()), int(math.ceil(0.1*len(P_f_e.items()))))+[len(P_f_e.items())-1]
for i, (gw, ew_counts) in enumerate(P_f_e.items()):
    if i in norm_range:
        sys.stderr.write(str(i+1)+"/"+str(len(P_f_e.items()))+"\n")
    Z = sum(ew_counts.values())
    for ew in ew_counts.keys():
        P_f_e[gw][ew] = P_f_e[gw][ew]*1.0/Z

# EM
sys.stderr.write("Done!\nPerforming EM...\n")
for i in range(5):
    sys.stderr.write("Iteration "+str(i+1)+"...\n")

    # E step
    c_e_f = defaultdict(float)
    f = defaultdict(float)
    sys.stderr.write("Counting...\n")
    for i, (german, english) in enumerate(data):
        if i in range(0, len(data), int(math.ceil(0.1*len(data))))+[len(data)-1]:
            sys.stderr.write(str(i+1)+"/"+str(len(data))+"\n")
        e = defaultdict(float)
        for ew in english:
            for gw in german:
                e[ew] += P_f_e[gw][ew]
        for ew in english:
            for gw in german:
                c = P_f_e[gw][ew]/e[ew]
                c_e_f[(ew, gw)] += c
                f[gw] += c
    # M step
    sys.stderr.write("Normalizing counts...\n")
    for g_i, (ew, gw) in enumerate(c_e_f.keys()):
        if g_i in range(0, len(c_e_f.keys()), int(math.ceil(0.1*len(c_e_f.keys())))):
            sys.stderr.write(str(g_i+1)+"/"+str(len(c_e_f.keys()))+"\n")
        P_f_e[gw][ew] = c_e_f[(ew, gw)]/f[gw]

sys.stderr.write("Writing P(f|e) table to \"ttable\"...\n")
ttable = codecs.open("ttable", "wb", "utf-8")
for gw, edict in P_f_e.items():
    ttable.write(gw+"\n")
    for ew, p in edict.items():
        ttable.write("\t"+ew+"\t"+str(p)+"\n")
ttable.close()

# Align
def diag_dist(s_i, s_len, t_i, t_len):
    return -1.0*abs(float(1.0*(s_i+1)/s_len-1.0*(t_i+1)/t_len))

def align(gw, gw_i, english):
    dist = sorted([(P_f_e[gw][ew], ew, ew_i) for ew_i, ew in enumerate(english)], reverse=True)
    word = max(dist)[1]
    matches = filter(lambda (s, w, i): w == word, dist)
    if len(matches) > 1:
        return max([(diag_dist(gw_i, len(german), ew_i, len(english)), ew, ew_i) for (s, ew, ew_i) in matches])[1:]
    else:
        return matches[0][1:]

def number(txt):
    for c in txt:
        if c in {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}:
            return True
    return False

def punct(txt):
    return txt in {",", ".", "'", "\""}

def suitable(gw, ew):
    return number(gw) == number(ew) and ((punct(gw) and punct(ew) and gw == ew) or (punct(gw) == punct(ew)))

sys.stderr.write("Calculating and printing out alignments...\n")
for german, english in data:
    for i, gw in enumerate(german):
        (ew, ew_i) = align(gw, i, english)
        if suitable(gw, ew):
            print str(i)+"-"+str(ew_i),
    print ""
